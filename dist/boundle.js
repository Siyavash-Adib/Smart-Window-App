/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/appTest.js":
/*!************************!*\
  !*** ./src/appTest.js ***!
  \************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const menuControl = __webpack_require__(/*! ./menuControl.js */ \"./src/menuControl.js\");\r\nconst toolBox = __webpack_require__(/*! ./toolBox.js */ \"./src/toolBox.js\");\r\n\r\nlet testIDCounter = 0;\r\n\r\nfunction init() {\r\n  if(true) {\r\n    menuControl.addNewWindowCard(\r\n      `Central Window`,\r\n      `Central Window`,\r\n      true\r\n    );\r\n    menuControl.setWindowCardBatteryPercentage(\r\n      `Central Window`,\r\n      toolBox.randomRange(0, 100)\r\n    );\r\n    menuControl.setWindowCardDoorClosePercentage(\r\n      `Central Window`,\r\n      toolBox.randomRange(0, 100)\r\n    );\r\n  }\r\n\r\n  if(true) {\r\n    const TEST_NUM_OF_SLAVE_WINDOW_CARDS = 4;\r\n\r\n    for(let i = 0; i < (TEST_NUM_OF_SLAVE_WINDOW_CARDS); i++) {\r\n      if(i > (TEST_NUM_OF_SLAVE_WINDOW_CARDS / 2)) {\r\n        menuControl.addNewWindowCard(\r\n          `Window number ${i}`,\r\n          `Window number ${i}`\r\n        );\r\n        menuControl.windowGoOffline(`Window number ${i}`);\r\n      } else {\r\n        menuControl.addNewWindowCard(\r\n          `Window number ${i}`,\r\n          `Window number ${i}`\r\n        );\r\n        menuControl.windowGoOnline(`Window number ${i}`);\r\n      }\r\n      \r\n      menuControl.setWindowCardBatteryPercentage(\r\n        `Window number ${i}`,\r\n        ((i + 1) / TEST_NUM_OF_SLAVE_WINDOW_CARDS) * 100);\r\n      menuControl.setWindowCardDoorClosePercentage(\r\n        `Window number ${i}`,\r\n        ((i + 1) / TEST_NUM_OF_SLAVE_WINDOW_CARDS) * 100);\r\n    }\r\n  }\r\n\r\n  if(true) {\r\n    const TEST_NUM_OF_SETTING_CARDS = 5;\r\n    \r\n    for(let i = 0; i < (TEST_NUM_OF_SETTING_CARDS); i++) {\r\n      menuControl.addNewSettingCard(\r\n        `Setting ${i}`,\r\n        `Random: ${toolBox.randomRange(0, 100)}`\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction generateNewDeviceStatus(deviceId) {\r\n  return {\r\n    settings: {\r\n      Relay_Latch_Time: 15,\r\n      Jack_And_Window_Movement_Time_Gap: 1000,\r\n      Speed_Monitoring_Process_Time_Interval: 10,\r\n      Motor_1_Speed_1_Min_Expected_Speed: 500,\r\n      Motor_1_Speed_2_Min_Expected_Speed: 1000,\r\n      Motor_1_Speed_Rise_Time: 500,\r\n      Window_Lock_Time: 500,\r\n      Window_Unlock_Time: 500,\r\n      Window_Length: 8500,\r\n      Window_Closed_Proximity_Percentage: 5,\r\n      Driver_1_Strength_Percentage: 100,\r\n      Driver_2_Strength_Percentage: 100,\r\n      Motor_1_Reversed: 0,\r\n      Motor_2_Reversed: 0,\r\n      Window_Speed_Level_1: 40,\r\n      Window_Speed_Level_2: 80,\r\n      Window_Slow_Speed_Area_Percentage: 20,\r\n      Remote_Debounce_Time: 500,\r\n      Motor_Driver_1_PWM_Frequency: 100,\r\n      Motor_Driver_2_PWM_Frequency: 100,\r\n      Motor_Driver_1_PWM_Inverted: 1,\r\n      Motor_Driver_2_PWM_Inverted: 1,\r\n      Sensor_Input_Configs: [0, 0, 0, 0, 0, 0],\r\n      Network_Mode: 'Master',\r\n      Wifi_Server_SSID: 'Smart Window',\r\n      Wifi_Server_PASS: 'Smart Window 123',\r\n      Wifi_Client_SSID: 'Smart Window',\r\n      Wifi_Client_PASS: 'Smart Window 123',\r\n      Device_ID: `${deviceId}`,\r\n      // Device_ID: testIDCounter++,\r\n      Device_Name: `Window # ${toolBox.randomRange(0, 100)}`,\r\n    },\r\n\r\n    status: {\r\n      Encoder_Value: toolBox.randomRange(0, 8500),\r\n      Blockage_Detected: 0,\r\n      Window_Locked: 0,\r\n      Window_State: 0,\r\n      Window_Control_State: 0,\r\n      Lock_Control_State: 0,\r\n      Window_Position_Unknown: 0,\r\n      Sensor_Input_State: [0, 0, 0, 0, 0, 0],\r\n      Vin_Filtered: 24,\r\n      VBAT_Filtered: 20,\r\n      Responding: toolBox.randomRange(0, 100) < 95 ? true : false,\r\n      Battery_Percentage: toolBox.randomRange(0, 100),\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  init,\r\n  generateNewDeviceStatus,\r\n}\r\n\r\n\n\n//# sourceURL=webpack://smart-window-app/./src/appTest.js?");

/***/ }),

/***/ "./src/config.js":
/*!***********************!*\
  !*** ./src/config.js ***!
  \***********************/
/***/ ((module) => {

eval("module.exports = {\r\n  menuControl: {\r\n    CLICK_1_VOLUME: 0.2,\r\n  },\r\n\r\n  wifi: {\r\n    WIFI_COMMAND: [\r\n      'WiFi_Command_Request_Network_Feedback',\r\n      'WiFi_Command_Window_Open',\r\n      'WiFi_Command_Window_Close',\r\n      'WiFi_Command_All_Windows_Open',\r\n      'WiFi_Command_All_Windows_Close',\r\n      'WiFi_Command_Set_Setting',\r\n      'WiFi_Command_Remove_Window',\r\n      'WiFi_Command_Add_Window',\r\n      'WiFi_Command_Error',\r\n    ],\r\n    WIFI_PACKET_ERROR: [\r\n      'WiFi_Packet_Error_CRC',\r\n      'WiFi_Packet_Error_Data_Length',\r\n      'WiFi_Packet_Error_Data',\r\n      'WiFi_Packet_Error_Empty_Slot',\r\n      'WiFi_Packet_Error_Out_Of_Range_Slot',\r\n      'WiFi_Packet_Error_Command'\r\n    ],\r\n    SET_SETTING: [\r\n      'Setting_Set_Relay_Latch_Time',\r\n      'Setting_Set_Jack_And_Window_Movement_Time_Gap',\r\n      'Setting_Set_Speed_Monitoring_Process_Time_Interval',\r\n      'Setting_Set_Motor_1_Speed_1_Min_Expected_Speed',\r\n      'Setting_Set_Motor_1_Speed_2_Min_Expected_Speed',\r\n      'Setting_Set_Motor_1_Speed_Rise_Time',\r\n      'Setting_Set_Window_Lock_Time',\r\n      'Setting_Set_Window_Unlock_Time',\r\n      'Setting_Set_Window_Length',\r\n      'Setting_Set_Window_Closed_Proximity_Percentage',\r\n      'Setting_Set_Driver_1_Strength_Percentage',\r\n      'Setting_Set_Driver_2_Strength_Percentage',\r\n      'Setting_Set_Motor_1_Reversed',\r\n      'Setting_Set_Motor_2_Reversed',\r\n      'Setting_Set_Window_Speed_Level_1',\r\n      'Setting_Set_Window_Speed_Level_2',\r\n      'Setting_Set_Window_Slow_Speed_Area_Percentage',\r\n      'Setting_Set_Remote_Debounce_Time',\r\n      'Setting_Set_Motor_Driver_1_PWM_Frequency',\r\n      'Setting_Set_Motor_Driver_2_PWM_Frequency',\r\n      'Setting_Set_Motor_Driver_1_PWM_Inverted',\r\n      'Setting_Set_Motor_Driver_2_PWM_Inverted',\r\n      'Setting_Set_Sensor_Input_Configs',\r\n      'Setting_Set_Network_Mode',\r\n      'Setting_Set_Wifi_Mode_Server_SSID',\r\n      'Setting_Set_Wifi_Mode_Server_PASS',\r\n      'Setting_Set_Wifi_Mode_Client_SSID',\r\n      'Setting_Set_Wifi_Mode_Client_PASS',\r\n      'Setting_Set_Device_Name'\r\n    ],\r\n\r\n    SERVER_IP: \"192.168.4.1\",\r\n    // SERVER_IP: \"192.168.1.119\",\r\n    // SERVER_IP: \"192.168.137.104\",\r\n  },\r\n\r\n  app: {\r\n    WIFI_MAX_REQUEST_FAILS: 10,\r\n    NETWORK_UPDATES_PER_SECOND: 2,\r\n    MAX_NETWORK_SIZE: 10,\r\n    MAX_PENDING_FOR_RESPONSE_TIME: 400,\r\n    BSP_GPIO_PIN_STATE: [\r\n      'IO Low',\r\n      'IO High'\r\n    ],\r\n    NETWORK_MODE: [\r\n      'Network Mode Master',\r\n      'Network Mode Slave'\r\n    ],\r\n    SENSOR_INPUT_EVENT: [\r\n      'Request Window Open',\r\n      'Request Window Close',\r\n      'Request Window Open Then Close',\r\n      'Request Window Close Then Open',\r\n      'Request Window Toggle State'\r\n    ],\r\n    WINDOW_CONTROL_STATE: [\r\n      'State Idle',\r\n      'State Executing PC Command',\r\n      'State Emergency Stop',\r\n      'State Openning The Window',\r\n      'State Closing The Window'\r\n    ],\r\n    LOCK_CONTROL_STATE: [\r\n      'State Neutral',\r\n      'State Locking',\r\n      'State Unlocking'\r\n    ],\r\n    WINDOW_STATE: [\r\n      'State Open',\r\n      'State Closed',\r\n      'State Stopped',\r\n      'State Moving'\r\n    ],\r\n    SPEED_MODE: [\r\n      'Speed Mode Dual',\r\n      'Speed Mode Slow',\r\n      'Speed Mode Fast'\r\n    ],\r\n    // WINDOW_DEVICE_SYSTEM_PARAMETERS: {\r\n    //   Relay_Latch_Time:                       {size: 4, editable: true, type: 'uint32'},\r\n    //   Jack_And_Window_Movement_Time_Gap:      {size: 4, editable: true, type: 'uint32'},\r\n    //   Speed_Monitoring_Process_Time_Interval: {size: 4, editable: true, type: 'uint32'},\r\n    //   Motor_1_Speed_1_Min_Expected_Speed:     {size: 4, editable: true, type: 'uint32'},\r\n    //   Motor_1_Speed_2_Min_Expected_Speed:     {size: 4, editable: true, type: 'uint32'},\r\n    //   Motor_1_Speed_Rise_Time:                {size: 4, editable: true, type: 'uint32'},\r\n    //   Window_Lock_Time:                       {size: 4, editable: true, type: 'uint32'},\r\n    //   Window_Closed_Proximity_Percentage:     {size: 1, editable: true, type: 'uint8'},\r\n    //   Driver_1_Strength_Percentage:           {size: 1, editable: true, type: 'uint8'},\r\n    //   Driver_2_Strength_Percentage:           {size: 1, editable: true, type: 'uint8'},\r\n    //   Motor_1_Reversed:                       {size: 1, editable: true, type: 'uint8'},\r\n    //   Motor_2_Reversed:                       {size: 1, editable: true, type: 'uint8'},\r\n    //   Window_Speed_Level_1:                   {size: 1, editable: true, type: 'uint8'},\r\n    //   Window_Speed_Level_2:                   {size: 1, editable: true, type: 'uint8'},\r\n    //   Window_Slow_Speed_Area_Percentage:      {size: 1, editable: true, type: 'uint8'},\r\n    //   Motor_Driver_1_PWM_Frequency:           {size: , editable: true, type: },\r\n    //   Motor_Driver_2_PWM_Frequency:           {size: , editable: true, type: },\r\n    //   Motor_Driver_1_PWM_Inverted:            {size: , editable: true, type: },\r\n    //   Motor_Driver_2_PWM_Inverted:            {size: , editable: true, type: },\r\n    //   Sensor_Input_Configs:                   {size: , editable: true, type: },\r\n    //   Network_Mode:                           {size: , editable: true, type: },\r\n    //   Wifi_Mode_Server_SSID:                  {size: , editable: true, type: },\r\n    //   Wifi_Mode_Server_PASS:                  {size: , editable: true, type: },\r\n    //   Wifi_Mode_Client_SSID:                  {size: , editable: true, type: },\r\n    //   Wifi_Mode_Client_PASS:                  {size: , editable: true, type: },\r\n    //   Node_Mac_Address:                       {size: , editable: false, type: },\r\n    //   Device_Name:                            {size: , editable: true, type: },\r\n    // },\r\n  },\r\n}\n\n//# sourceURL=webpack://smart-window-app/./src/config.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// console.clear();\r\n\r\nconst toolBox = __webpack_require__(/*! ./toolBox.js */ \"./src/toolBox.js\");\r\nconst menuControl = __webpack_require__(/*! ./menuControl.js */ \"./src/menuControl.js\");\r\nconst appTest = __webpack_require__(/*! ./appTest.js */ \"./src/appTest.js\");\r\nconst config = __webpack_require__(/*! ./config.js */ \"./src/config.js\");\r\nconst wifiCom = __webpack_require__(/*! ./wifiCom.js */ \"./src/wifiCom.js\");\r\n__Debug_toolBox = toolBox;\r\n__Debug_menuControl = menuControl;\r\n__Debug_wifiCom = wifiCom;\r\n\r\n// if('serviceWorker' in navigator) {\r\n//   window.addEventListener('load', () => {\r\n//     navigator.serviceWorker.register('./serviceWorker.js')\r\n//       .then(reg => {\r\n//         console.log('Registered! 😎', reg);\r\n//       })\r\n//       .catch(err => {\r\n//         console.log('😢 Registeration failed: ', err);\r\n//       });\r\n//   })\r\n// }\r\n\r\nlet wifiRequestFailCounter = 0;\r\n\r\nlet appState = {\r\n  current: 'idle',\r\n  next: 'idle',\r\n  step: 0,\r\n}\r\n__Debug_appState = appState;\r\n\r\nlet appUIRequest = {\r\n  pending: false,\r\n}\r\n\r\nlet deviceResponse = {\r\n  pending: false,\r\n  status: 'failed',\r\n  packet: null,\r\n}\r\n\r\nlet tempDevicesStatus = [];\r\nlet tempDevicesStatusCounter=  0;\r\nlet latestDevicesStatus = null;\r\nlet appSelectedWindowCard = null;\r\nlet pendingForResponseThreadTimer = threadTimerFactoryFunc();\r\n\r\nfunction threadTimerFactoryFunc() {\r\n  let newThread = {\r\n    interval: 0,\r\n    \r\n    timePassed() {\r\n      return (this.interval <= toolBox.getTick())\r\n    },\r\n    \r\n    setNextInterval(nextInterval) {\r\n      this.interval = toolBox.getTick() + nextInterval;\r\n    },\r\n  }\r\n\r\n  return newThread;\r\n}\r\n\r\nfunction uiEventsHandler(event) {\r\n  console.log('uiEvent:', event);\r\n\r\n  switch(event.sourceType) {\r\n    case '.nav-bar--item':\r\n      switch(event.eventName) {\r\n        case 'Home':\r\n          menuControl.goToPage('.home-page');\r\n          break;\r\n        \r\n        case 'Status':\r\n          menuControl.goToPage('.status-page');\r\n          break;\r\n        \r\n        case 'Settings':\r\n          menuControl.goToPage('.settings-page');\r\n          break;\r\n        \r\n        case 'Remove':\r\n          menuControl.opendialog('yesNo', {\r\n            text: 'Do you want to remove this window ?'\r\n          });\r\n          console.log(event.eventName);\r\n          break;\r\n        \r\n        case 'Advance':\r\n          console.log(event.eventName);\r\n          break;\r\n        \r\n        default:\r\n          break;\r\n      }\r\n      break;\r\n\r\n    case '.window-card':\r\n      switch(event.eventName) {\r\n        case 'goToSettingsButton':\r\n          menuControl.emptyPage('.settings-page');\r\n          menuControl.goToPage('.settings-page');\r\n          appSelectedWindowCard = event.windowId;\r\n          appRefreshSettingsPage();\r\n          break;\r\n\r\n        case 'closeButton':\r\n          wifiCom.sendCommandPacket('Close', {\r\n            windowId: event.windowId\r\n          });\r\n          break;\r\n\r\n        case 'openButton':\r\n          wifiCom.sendCommandPacket('Open', {\r\n            windowId: event.windowId\r\n          });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n      break;\r\n\r\n    case '.dialog-2':\r\n      switch(event.eventName) {\r\n        case 'dialogButtonCancle':\r\n          menuControl.closeDialog();\r\n          break;\r\n\r\n        case 'dialogButtonSubmit':\r\n          menuControl.closeDialog();\r\n          switch(event.setting.name) {\r\n            case 'Do you want to remove this window ?':\r\n              wifiCom.sendCommandPacket('removeWindow', {\r\n                windowId: appSelectedWindowCard\r\n              });\r\n              menuControl.goToPage('.home-page');\r\n              break;\r\n            \r\n            default: \r\n              throw new Error(`\"${event.setting.name}\" is unknown.`);\r\n              break;\r\n          }\r\n          break;\r\n        \r\n        default:\r\n          break;\r\n      }\r\n      break;\r\n\r\n    case '.dialog-1':\r\n    case '.dialog-3':\r\n      let skipSendCommandPacketAtTheEnd = false;\r\n\r\n      switch(event.eventName) {\r\n        case 'dialogButtonCancle':\r\n          menuControl.closeDialog();\r\n          break;\r\n        \r\n        case 'dialogButtonSubmit':\r\n          menuControl.closeDialog();\r\n          const convertValueToArray = (format, size) => {\r\n            if(format === 'array') {\r\n              // TBD\r\n            } else {\r\n              event.setting.value = toolBox.numToByteArray(\r\n                event.setting.value,\r\n                format\r\n              );\r\n            }\r\n          }\r\n\r\n          switch(event.setting.name) {\r\n            case 'Enter the Device ID of the New Window':\r\n              event.setting.value = toolBox.fromHexString(\r\n                event.setting.value\r\n              );\r\n              if(event.setting.value.legnth > 6) {\r\n                event.setting.value = event.setting.value.slice(0, 6);\r\n              }\r\n              wifiCom.sendCommandPacket('addWindow', {\r\n                setting: event.setting,\r\n              });\r\n              skipSendCommandPacketAtTheEnd = true;\r\n              break;\r\n\r\n            case 'Relay Latch Time':\r\n            case 'Jack And Window Movement Time Gap':\r\n            case 'Speed Monitoring Process Time Interval':\r\n            case 'Motor 1 Speed 1 Min Expected Speed':\r\n            case 'Motor 1 Speed 2 Min Expected Speed':\r\n            case 'Motor 1 Speed Rise Time':\r\n            case 'Window Lock Time':\r\n            case 'Window Unlock Time':\r\n            case 'Window Length':\r\n            case 'Remote Debounce Time':\r\n            case 'Motor Driver 1 PWM Frequency':\r\n            case 'Motor Driver 2 PWM Frequency':\r\n              event.setting.value = parseInt(event.setting.value);\r\n              convertValueToArray('uint32');\r\n              break;\r\n\r\n            case 'Window Closed Proximity Percentage':\r\n            case 'Driver 1 Strength Percentage':\r\n            case 'Driver 2 Strength Percentage':\r\n            case 'Window Speed Level 1':\r\n            case 'Window Speed Level 2':\r\n            case 'Window Slow Speed Area Percentage':\r\n              event.setting.value = parseInt(event.setting.value);\r\n              convertValueToArray('uint8');\r\n              break;\r\n\r\n            case 'Motor 1 Reversed':\r\n            case 'Motor 2 Reversed':\r\n            case 'Motor Driver 1 PWM Inverted':\r\n            case 'Motor Driver 2 PWM Inverted':\r\n              event.setting.value = event.setting.value === 'No' ? 0 : 1;\r\n              convertValueToArray('uint8');\r\n              break;\r\n\r\n            case 'Network Mode':\r\n              event.setting.value =\r\n                event.setting.value === 'Network_Mode_Master' ? 0 : 1;\r\n              convertValueToArray('uint8');\r\n              break;\r\n              \r\n            case 'Wifi Mode Server SSID':\r\n            case 'Wifi Mode Server PASS':\r\n            case 'Wifi Mode Client SSID':\r\n            case 'Wifi Mode Client PASS':\r\n            case 'Device Name':\r\n              event.setting.value = toolBox.stringToAsciiArray(\r\n                event.setting.value\r\n              );\r\n              while(event.setting.value.length !== 25) {\r\n                event.setting.value.push(0);\r\n              }\r\n              break;\r\n\r\n            default:\r\n              const getSensorNumber = () => {\r\n                return event.setting.name.match(/(?<=Sensor\\()\\d*(?=\\))/);\r\n              }\r\n              if(/Sensor\\(\\d+\\)/.test(event.setting.name)) {\r\n                let sensorNum = parseInt(getSensorNumber());\r\n\r\n                console.log('event.setting.value', event.setting.value);\r\n                if(/Normal Value/.test(event.setting.name)) {\r\n                  event.setting.value = [\r\n                    sensorNum,\r\n                    0, /* Sensor Parameter */\r\n                    config.app.BSP_GPIO_PIN_STATE.indexOf(\r\n                      event.setting.value\r\n                    )\r\n                  ];\r\n                } else if(/Open Close Time Gap/.test(event.setting.name)) {\r\n                  convertValueToArray('uint32');\r\n                  event.setting.value = [\r\n                    sensorNum,\r\n                    1, /* Sensor Parameter */\r\n                    ...event.setting.value\r\n                  ];\r\n                } else if(/Trigger Event/.test(event.setting.name)) {\r\n                  event.setting.value = [\r\n                    sensorNum,\r\n                    2, /* Sensor Parameter */\r\n                    config.app.SENSOR_INPUT_EVENT.indexOf(\r\n                      event.setting.value\r\n                    )\r\n                  ];\r\n                }\r\n\r\n                event.setting.name = 'Sensor Input Configs';\r\n\r\n                console.log('sensorNum', sensorNum);\r\n                console.log(event.setting.value);\r\n              } else {\r\n                throw new Error(`\"${event.setting.name}\" is unknown.`);\r\n              }\r\n              break;\r\n          }\r\n        \r\n          if(skipSendCommandPacketAtTheEnd) {\r\n\r\n          } else {\r\n            wifiCom.sendCommandPacket('setSetting', {\r\n              windowId: appSelectedWindowCard,\r\n              setting: event.setting,\r\n            });\r\n          }\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n      break;\r\n\r\n    case '.central-window--network-card':\r\n      switch(event.eventName) {\r\n        case 'openAllWindowsButton':\r\n          wifiCom.sendCommandPacket('OpenAll');\r\n          break;\r\n\r\n        case 'closeAllWindowsButton':\r\n          wifiCom.sendCommandPacket('CloseAll');\r\n          break;\r\n\r\n        case 'addNewWindowButton':\r\n          menuControl.opendialog('text', {\r\n            text: \"Enter the Device ID of the New Window\",\r\n            placeHolder: \"Example: \" + \"123456ABCDEF\",\r\n          });\r\n          break;\r\n  \r\n        default:\r\n          break;\r\n      }\r\n      break;\r\n\r\n    case '.setting-card':\r\n      switch(event.eventName) {\r\n        case 'settingCardEdit':\r\n          switch(event.settingName) {\r\n            case 'Motor 1 Reversed':\r\n              menuControl.opendialog('select', {\r\n                text: event.settingName,\r\n                selectOptions: [\r\n                  'Yes',\r\n                  'No',\r\n                ],\r\n              });\r\n              break;\r\n\r\n            case 'Motor 2 Reversed':\r\n              menuControl.opendialog('select', {\r\n                text: event.settingName,\r\n                selectOptions: [\r\n                  'Yes',\r\n                  'No',\r\n                ],\r\n              });\r\n              break;\r\n              \r\n            case 'Motor Driver 1 PWM Inverted':\r\n              menuControl.opendialog('select', {\r\n                text: event.settingName,\r\n                selectOptions: [\r\n                  'Yes',\r\n                  'No',\r\n                ],\r\n              });\r\n              break;\r\n\r\n            case 'Motor Driver 2 PWM Inverted':\r\n              menuControl.opendialog('select', {\r\n                text: event.settingName,\r\n                selectOptions: [\r\n                  'Yes',\r\n                  'No',\r\n                ],\r\n              });\r\n              break;\r\n\r\n            case 'Network Mode':\r\n              menuControl.opendialog('select', {\r\n                text: event.settingName,\r\n                selectOptions: [\r\n                  'Network_Mode_Master',\r\n                  'Network_Mode_Slave',\r\n                ],\r\n              });\r\n              break;\r\n\r\n            case 'Sensor(0) Normal Value':\r\n            case 'Sensor(1) Normal Value':\r\n            case 'Sensor(2) Normal Value':\r\n            case 'Sensor(3) Normal Value':\r\n            case 'Sensor(4) Normal Value':\r\n            case 'Sensor(5) Normal Value':\r\n              menuControl.opendialog('select', {\r\n                text: event.settingName,\r\n                selectOptions: [\r\n                  'IO Low',\r\n                  'IO High',\r\n                ],\r\n              });\r\n              break;\r\n\r\n            case 'Sensor(0) Trigger Event':\r\n            case 'Sensor(1) Trigger Event':\r\n            case 'Sensor(2) Trigger Event':\r\n            case 'Sensor(3) Trigger Event':\r\n            case 'Sensor(4) Trigger Event':\r\n            case 'Sensor(5) Trigger Event':\r\n              menuControl.opendialog('select', {\r\n                text: event.settingName,\r\n                selectOptions: [\r\n                  ...config.app.SENSOR_INPUT_EVENT\r\n                ],\r\n              });\r\n              break;\r\n\r\n            default:\r\n              menuControl.opendialog('text', {\r\n                text: event.settingName,\r\n                placeHolder: \"Example: \" + event.settingValue,\r\n              });\r\n              break;\r\n          }\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n      break;\r\n      \r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nfunction queueAppStateMachineTick(nextInterval) {\r\n  setTimeout(() => {\r\n      appStateMachineTick(false);\r\n    },\r\n    nextInterval\r\n  );\r\n}\r\n\r\nfunction appInit() {\r\n  menuControl.init(uiEventsHandler);\r\n  // appTest.init();\r\n\r\n  queueAppStateMachineTick(1000 / config.app.NETWORK_UPDATES_PER_SECOND);\r\n}\r\n\r\nfunction appStateMachineGoToState(newState) {\r\n  appState.current = newState;\r\n  appState.step = 0;\r\n}\r\n\r\nfunction appStateMachineHandleFailure() {\r\n\r\n}\r\n\r\nfunction moveSensorInputConfigsToEndOfArray(settingsObjectEntries) {\r\n  let indexOfSensorInputConfigs = null;\r\n  for(let i = 0; i < settingsObjectEntries.length; i++) {\r\n    if(settingsObjectEntries[i][0] === 'Sensor_Input_Configs') {\r\n      indexOfSensorInputConfigs = i;\r\n      break;\r\n    }\r\n  }\r\n  const Sensor_Input_Configs = settingsObjectEntries\r\n    .splice(indexOfSensorInputConfigs, 1);\r\n    \r\n  settingsObjectEntries.push(...Sensor_Input_Configs);\r\n}\r\n\r\nfunction appRefreshSettingsPage() {\r\n  const addOrUpdateSettingCard = (name, value, editable) => {\r\n    if(menuControl.hasSettingCard(name)) {\r\n      menuControl.updateSettingCard(\r\n        name,\r\n        value,\r\n        editable\r\n      );\r\n    } else {\r\n      menuControl.addNewSettingCard(\r\n        name,\r\n        value,\r\n        editable\r\n      );\r\n    }\r\n  }\r\n  \r\n  const addOrUpdateStatusCard = (name, value) => {\r\n    if(menuControl.hasStatusCard(name)) {\r\n      menuControl.updateStatusCard(\r\n        name,\r\n        value\r\n      );\r\n    } else {\r\n      menuControl.addNewStatusCard(\r\n        name,\r\n        value\r\n      );\r\n    }\r\n  }\r\n\r\n  let selectedWindow = latestDevicesStatus.find((device) => {\r\n    return device.settings.Device_ID.value === appSelectedWindowCard;\r\n  });\r\n\r\n  const settingsObjectEntries = Object.entries(selectedWindow.settings);\r\n  moveSensorInputConfigsToEndOfArray(settingsObjectEntries);\r\n\r\n  settingsObjectEntries.forEach(([key, value]) => {\r\n    let settingName = key.split('_').join(' ');\r\n    let settingValue = value.value;\r\n    let settingEditable = value.editable;\r\n    \r\n    switch(settingName) {\r\n      case 'Sensor Input Configs':\r\n        let count = 0;\r\n        settingValue.forEach((sensorConfig) => {\r\n          addOrUpdateSettingCard(\r\n            `Sensor(${count}) Normal Value`,\r\n            sensorConfig.Normal_Value,\r\n            settingEditable\r\n          );\r\n          addOrUpdateSettingCard(\r\n            `Sensor(${count}) Open Close Time Gap`,\r\n            sensorConfig.Open_Close_Time_Gap,\r\n            settingEditable\r\n          );\r\n          addOrUpdateSettingCard(\r\n            `Sensor(${count}) Trigger Event`,\r\n            sensorConfig.Trigger_Event,\r\n            settingEditable\r\n          );\r\n          count++;\r\n        });\r\n        break;\r\n\r\n      default:\r\n        addOrUpdateSettingCard(\r\n          settingName,\r\n          settingValue,\r\n          settingEditable\r\n        );\r\n        break;\r\n    }\r\n  });\r\n\r\n  const statusObjectEntries = Object.entries(selectedWindow.status);\r\n\r\n  statusObjectEntries.forEach(([key, value]) => {\r\n    let statusName = key.split('_').join(' ');\r\n    let statusValue = value;\r\n    \r\n    switch(statusName) {\r\n      case 'Sensor Input State':\r\n        let count = 0;\r\n        statusValue.forEach((sensorInputState) => {\r\n          addOrUpdateStatusCard(\r\n            `Sensor(${count}) Input State`,\r\n            sensorInputState\r\n          );\r\n          count++;\r\n        });\r\n        break;\r\n\r\n      default:\r\n        addOrUpdateStatusCard(\r\n          statusName,\r\n          statusValue\r\n        );\r\n        break;\r\n    }\r\n  });\r\n}\r\n\r\nfunction appRefreshHomePage() {\r\n  if(latestDevicesStatus === null) {\r\n    return;\r\n  }\r\n\r\n  let newWindowIDs = new Set();\r\n  let removedWindowIDs = new Set();\r\n  let currentWindowIDs = menuControl.getAllWindowIDs();\r\n  // console.log('currentWindowIDs', currentWindowIDs);\r\n  let feedbackWindowIDs = latestDevicesStatus\r\n    .map((device) => {\r\n      return device.settings.Device_ID.value;\r\n    });\r\n  // console.log('feedbackWindowIDs', feedbackWindowIDs);\r\n  feedbackWindowIDs = new Set(feedbackWindowIDs);\r\n\r\n  for(id of feedbackWindowIDs) {\r\n    if(currentWindowIDs.has(id)) {\r\n      // nothing\r\n    } else {\r\n      newWindowIDs.add(id);\r\n    }\r\n  }\r\n  // console.log('newWindowIDs', newWindowIDs);\r\n\r\n  for(id of currentWindowIDs) {\r\n    if(feedbackWindowIDs.has(id)) {\r\n      // nothing\r\n    } else {\r\n      removedWindowIDs.add(id);\r\n    }\r\n  }\r\n\r\n  for(id of removedWindowIDs) {\r\n    menuControl.removeWindowCard(id);\r\n  }\r\n\r\n  let firstDevice = true;\r\n  latestDevicesStatus.forEach((device) => {\r\n    if(newWindowIDs.has(device.settings.Device_ID.value)) {\r\n      menuControl.addNewWindowCard(\r\n        device.settings.Device_Name.value,\r\n        device.settings.Device_ID.value,\r\n        firstDevice\r\n      );\r\n    }\r\n    menuControl.setWindowCardName(\r\n      device.settings.Device_ID.value,\r\n      device.settings.Device_Name.value\r\n    );\r\n    menuControl.setWindowCardBatteryPercentage(\r\n      device.settings.Device_ID.value,\r\n      device.status.Battery_Percentage\r\n    );\r\n    if(device.settings.Window_Length.value) {\r\n      menuControl.setWindowCardDoorClosePercentage(\r\n        device.settings.Device_ID.value,\r\n        100 * device.status.Encoder_Value / device.settings.Window_Length.value\r\n      );\r\n    } else {\r\n      menuControl.setWindowCardDoorClosePercentage(\r\n        device.settings.Device_ID.value,\r\n        0\r\n      );\r\n    }\r\n    if(device.status.Responding) {\r\n      menuControl.windowGoOnline(device.settings.Device_ID.value);\r\n    } else {\r\n      menuControl.windowGoOffline(device.settings.Device_ID.value);\r\n    }\r\n    \r\n    menuControl.setWindowLockState(\r\n      device.settings.Device_ID.value,\r\n      device.status.Window_Locked === 'Yes'\r\n    );\r\n    \r\n    menuControl.setWindowBlockedState(\r\n      device.settings.Device_ID.value,\r\n      device.status.Blockage_Detected === 'Yes'\r\n    );\r\n\r\n    firstDevice = false;\r\n  });\r\n\r\n  let numOfWindows = latestDevicesStatus.length;\r\n  let numOfOnlineWindows = latestDevicesStatus\r\n    .reduce((counter, device) => {\r\n      if(device.status.Responding) {\r\n        return counter + 1;\r\n      } else {\r\n        return counter;\r\n      }\r\n    }, 0);\r\n\r\n    menuControl.setNetworkOnlineWindows(\r\n      numOfOnlineWindows,\r\n      numOfWindows\r\n    );\r\n}\r\n\r\nfunction allWindowsGoOffline() {\r\n  if(latestDevicesStatus) {\r\n    latestDevicesStatus.forEach((device) => {\r\n      menuControl.windowGoOffline(device.settings.Device_ID.value);\r\n    })\r\n  }\r\n}\r\n\r\nfunction appStateMachineTick(consoleDebugMessages=false) {\r\n  if(consoleDebugMessages) {\r\n    console.log('Start ----------------------------------');\r\n    console.log(appState);\r\n  }\r\n\r\n  let instantReTick = false;\r\n\r\n  switch(appState.current) {\r\n    case 'idle':\r\n      if(appUIRequest.pending) {\r\n        appUIRequest.pending = false;\r\n        // ????\r\n      } else {\r\n        appStateMachineGoToState('request device status');\r\n        instantReTick = true;\r\n      }\r\n      break;\r\n\r\n    case 'request device status':\r\n      switch(appState.step) {\r\n        case 0:\r\n          tempDevicesStatus = [];\r\n          for(let i = 0; i < config.app.MAX_NETWORK_SIZE; i++) {\r\n            tempDevicesStatus.push(null);\r\n          }\r\n          tempDevicesStatusCounter = 0;\r\n\r\n          instantReTick = true;\r\n          appState.step++;\r\n          break;\r\n          \r\n        case 1:\r\n          /* dummy packet for debugging Begin ↓ *********************************/\r\n            // deviceResponse.pending = true;\r\n            // deviceResponse.status = 'succeeded';\r\n            // deviceResponse.packet = {\r\n            //   type: 'device status',\r\n            //   deviceStatus: appTest.generateNewDeviceStatus(tempDevicesStatusCounter)\r\n            // };\r\n          /* dummy packet for debugging End   ↑ *********************************/\r\n\r\n          pendingForResponseThreadTimer.setNextInterval(\r\n            config.app.MAX_PENDING_FOR_RESPONSE_TIME\r\n          );\r\n          wifiCom.requestDeviceStatus(tempDevicesStatusCounter, (requestResult) => {\r\n            deviceResponse = requestResult;\r\n          });\r\n\r\n          instantReTick = true;\r\n          appState.step++;\r\n          break;\r\n\r\n        case 2:\r\n          instantReTick = true;\r\n          if(deviceResponse.pending) {\r\n            switch(deviceResponse.status) {\r\n              case 'failed':\r\n                console.log('WiFi request failed, going back to idle state');\r\n                wifiRequestFailCounter++;\r\n                if(wifiRequestFailCounter >= config.app.WIFI_MAX_REQUEST_FAILS) {\r\n                  allWindowsGoOffline();\r\n                }\r\n                appStateMachineGoToState('idle');\r\n                break;\r\n\r\n              case 'succeeded':\r\n                wifiRequestFailCounter = 0;\r\n                // console.log('request response received,', toolBox.getTick() / 1000);\r\n                if(deviceResponse.packet.type !== 'device status') {\r\n                  console.log('why are we getting a \\'device status\\' response ?!?!?!');\r\n                } else {\r\n                  if(deviceResponse.packet.deviceStatus.status.emptySlot === true) {\r\n                    latestDevicesStatus = toolBox.deepClone(\r\n                      tempDevicesStatus\r\n                    );\r\n                    latestDevicesStatus = latestDevicesStatus\r\n                      .filter(device => (device !== null));\r\n                    appState.step++;\r\n                    // console.log(`slot ${tempDevicesStatusCounter} is empty`);\r\n                    // console.log('latestDevicesStatus', latestDevicesStatus);\r\n                    // console.log('step ahead');\r\n                  } else {\r\n                    if(deviceResponse.packet.deviceStatus.status\r\n                        .Window_Index !== tempDevicesStatusCounter) {\r\n                      \r\n                        console.log('Wrong window index, going back to idle');\r\n                        console.log(`Received ${deviceResponse.packet.deviceStatus.status.Window_Index}`);\r\n                        console.log(`Expected ${tempDevicesStatusCounter}`);\r\n                        // console.log('Going back to waiting for all requests expiration');\r\n                        // appStateMachineGoToState('waiting for all requests expiration');\r\n                    } else {\r\n                      tempDevicesStatus[tempDevicesStatusCounter] = toolBox.deepClone(\r\n                        deviceResponse.packet.deviceStatus\r\n                      );\r\n                      // console.log(`new device[${tempDevicesStatusCounter}] id:`, deviceResponse.packet.deviceStatus.settings.Device_ID)\r\n  \r\n                      tempDevicesStatusCounter++;\r\n                      appState.step--;\r\n                      // console.log('step back, new slot is', tempDevicesStatusCounter);\r\n                    }\r\n                  }\r\n                }\r\n                break;\r\n\r\n              default:\r\n                appStateMachineHandleFailure('wrong deviceResponse.status');\r\n                break;\r\n            }\r\n            deviceResponse = {};\r\n          } else if (pendingForResponseThreadTimer.timePassed()) {\r\n            // console.log('step 2');\r\n            // console.log('deviceResponse =', deviceResponse);\r\n            // console.log('no response received', toolBox.getTick() / 1000);\r\n            \r\n            appState.step--;\r\n            // console.log('step back,', tempDevicesStatusCounter);\r\n          }\r\n          break;\r\n\r\n        case 3:\r\n          switch(menuControl.getCurrentPage()) {\r\n            case '.home-page':\r\n              appRefreshHomePage();\r\n              break;\r\n            \r\n            case '.settings-page':\r\n              appRefreshSettingsPage();\r\n              break;\r\n            \r\n            default:\r\n              break;\r\n          }\r\n          appStateMachineGoToState('idle');\r\n          break;\r\n\r\n        default:\r\n          appStateMachineHandleFailure('wrong appState.step');\r\n      }\r\n      break;\r\n\r\n    case 'waiting for all requests expiration':\r\n      switch(appState.step) {\r\n        case 0:\r\n          pendingForResponseThreadTimer.setNextInterval(\r\n            config.app.MAX_PENDING_FOR_RESPONSE_TIME * 5\r\n          );\r\n          appState.step++;\r\n          break;\r\n\r\n        case 1:\r\n          if(pendingForResponseThreadTimer.timePassed()) {\r\n            console.log('Waiting for all requests expiration passed');\r\n            console.log('Going back to idle');\r\n            appStateMachineGoToState('idle');\r\n          }\r\n          break;\r\n\r\n        default:\r\n          appStateMachineHandleFailure('wrong appState.step');\r\n          break;\r\n      }\r\n      break;\r\n\r\n    default:\r\n      appStateMachineHandleFailure('wrong appState.step');\r\n      break;\r\n  }\r\n  \r\n  if(consoleDebugMessages) {\r\n    console.log(appState);\r\n    console.log('End ----------------------------------');\r\n  }\r\n\r\n  if(instantReTick) {\r\n    queueAppStateMachineTick(0)\r\n    // appStateMachineTick(consoleDebugMessages);\r\n  } else {\r\n    queueAppStateMachineTick(1000 / config.app.NETWORK_UPDATES_PER_SECOND);\r\n  }\r\n}\r\n\r\n__Debug_appStateMachineTick = appStateMachineTick;\r\n\r\nappInit();\r\n\r\n\n\n//# sourceURL=webpack://smart-window-app/./src/index.js?");

/***/ }),

/***/ "./src/menuControl.js":
/*!****************************!*\
  !*** ./src/menuControl.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const toolBox = __webpack_require__(/*! ./toolBox.js */ \"./src/toolBox.js\");\r\nconst config = __webpack_require__(/*! ./config.js */ \"./src/config.js\");\r\n\r\nconst click1Audio = document.querySelector(\"#click-1\"); \r\nconst dialog1 = document.querySelector('.dialog-1');\r\nconst dialog2 = document.querySelector('.dialog-2');\r\nconst dialog3 = document.querySelector('.dialog-3');\r\nlet uiEventsHandler = null;\r\nlet currentPage = null;\r\n\r\nfunction init(uiEventsHandlerCallback) {\r\n  navBarInit();\r\n  uiEventsHandler = uiEventsHandlerCallback;\r\n\r\n  goToPage('.home-page');\r\n  // goToPage('.settings-page');\r\n\r\n  dialogsInit();\r\n}\r\n\r\nfunction dialogsInit () {\r\n  document.addEventListener('click', (event) => {\r\n    if(event.target.classList.contains('dialog-1')) {\r\n      closeDialog();\r\n    }\r\n  });\r\n  \r\n  document.addEventListener('click', (event) => {\r\n    if(event.target.classList.contains('dialog-2')) {\r\n      closeDialog();\r\n    }\r\n  });\r\n  \r\n  document.addEventListener('click', (event) => {\r\n    if(event.target.classList.contains('dialog-3')) {\r\n      closeDialog();\r\n    }\r\n  });\r\n\r\n  addClickSoundToUIElements(dialog1);\r\n  addClickEventToUIElements(dialog1, '.dialog-1');\r\n\r\n  addClickSoundToUIElements(dialog2);\r\n  addClickEventToUIElements(dialog2, '.dialog-2');\r\n\r\n  addClickSoundToUIElements(dialog3);\r\n  addClickEventToUIElements(dialog3, '.dialog-3');\r\n  \r\n  // dialog1.showModal();\r\n\r\n  // opendialog('select', {\r\n  //   text: \"Some Name\",\r\n  //   selectOptions : [\r\n  //     'option1',\r\n  //     'option2',\r\n  //     'option3',\r\n  //     'option4',\r\n  //     'option5',\r\n  //   ],\r\n  // });\r\n}\r\n\r\nfunction empySelectOptions(selectElement) {\r\n  while(1) {\r\n    let option = selectElement.querySelector('option');\r\n    if(option) {\r\n      selectElement.removeChild(option);\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction opendialog(type, options) {\r\n  switch(type) {\r\n    case 'select':\r\n      document.querySelector('.dialog-3-card--name')\r\n        .textContent = options.text;\r\n      \r\n      let selectElement = dialog3.querySelector('select');\r\n      empySelectOptions(selectElement);\r\n\r\n      options.selectOptions.forEach((optionValue) => {\r\n        let option = document.createElement('option');\r\n        option.value = optionValue;\r\n        option.text = optionValue;   \r\n        selectElement.add(option);\r\n      })\r\n\r\n      dialog3.showModal();\r\n      break;\r\n\r\n    case 'yesNo':\r\n      document.querySelector('.dialog-2-card--name')\r\n        .textContent = options.text;\r\n      dialog2.showModal();\r\n      break;\r\n\r\n    case 'text':\r\n      document.querySelector('.dialog-1-card--name')\r\n        .textContent = options.text;\r\n      document.querySelector('.dialog-1-card--input')\r\n      .value = \"\";\r\n      if(options.placeHolder !== null) {\r\n        document.querySelector('.dialog-1-card--input')\r\n        .placeholder = options.placeHolder;\r\n      }\r\n      dialog1.showModal();\r\n      break;\r\n  }\r\n}\r\n\r\nfunction closeDialog() {\r\n  dialog1.close();\r\n  dialog2.close();\r\n  dialog3.close();\r\n}\r\n\r\nfunction addNewStatusCard(newStatusName, newSstatusValue) {\r\n  const template = document.querySelector('#status-card-template');\r\n  let clone = template.content.cloneNode(true);\r\n  let statusCard = clone.querySelector(\".status-card\");\r\n  statusCard.querySelector(\".status-card--name\")\r\n    .textContent = newStatusName;\r\n  statusCard.querySelector(\".status-card--value\")\r\n    .textContent = newSstatusValue;\r\n  statusCard.dataset.statusName = newStatusName;\r\n  \r\n  document.querySelector('.settings-page--content')\r\n    .appendChild(clone);\r\n}\r\n\r\nfunction addNewSettingCard(newSettingName, newSettingValue, editable) {\r\n  const template = document.querySelector('#setting-card-template');\r\n  let clone = template.content.cloneNode(true);\r\n  let settingCard = clone.querySelector(\".setting-card\");\r\n  settingCard.querySelector(\".setting-card--name\")\r\n    .textContent = newSettingName;\r\n  settingCard.querySelector(\".setting-card--value\")\r\n    .textContent = newSettingValue;\r\n  settingCard.dataset.settingName = newSettingName;\r\n  \r\n  document.querySelector('.settings-page--content')\r\n    .appendChild(clone);\r\n\r\n  if(editable) {\r\n    addClickSoundToUIElements(settingCard);\r\n    addClickEventToUIElements(settingCard, '.setting-card');\r\n  } else {\r\n    removeSettingCardEditIcon(settingCard);\r\n  }\r\n}\r\n\r\nfunction addNewWindowCard(\r\n  windowName,\r\n  windowId,\r\n  windowIsCenttralWindow=false\r\n) {\r\n  let clone = null;\r\n  let windowCard = null;\r\n  let networkCard = null;\r\n\r\n  if(windowIsCenttralWindow) {\r\n    const template = document.querySelector('#central-window-template');\r\n    clone = template.content.cloneNode(true);\r\n\r\n    clone.querySelector('.central-window--window-card')\r\n      .appendChild(\r\n        document.querySelector('#window-card-template')\r\n        .content.cloneNode(true)\r\n      );\r\n  } else {\r\n    const template = document.querySelector('#window-card-template');\r\n    clone = template.content.cloneNode(true);\r\n    clone.querySelector('.window-card').classList.add('offline-window');\r\n  }\r\n  \r\n  clone.querySelector(\".window-card\").classList.add('new-element-tmep-class');\r\n\r\n  if(windowIsCenttralWindow) {\r\n    windowCard = clone.querySelector('.window-card .window-card');\r\n    networkCard = clone.querySelector('.central-window--network-card');\r\n  } else {\r\n    windowCard = clone.querySelector('.window-card');\r\n  }\r\n\r\n  clone.querySelector(`.window-card--room-name`)\r\n  .textContent = windowName;\r\n\r\n  windowCard.dataset.windowId = windowId;\r\n  \r\n  document.querySelector('.home-page--content')\r\n    .appendChild(clone);\r\n\r\n  addClickSoundToUIElements(windowCard);\r\n  \r\n  addClickEventToUIElements(windowCard, '.window-card');\r\n  if(windowIsCenttralWindow) {\r\n    addClickEventToUIElements(networkCard, '.central-window--network-card');\r\n  }\r\n}\r\n\r\nfunction addClickEventToUIElements (parentElement, parentElementSelector) {\r\n  // let parentType = parentElement.closest('.window-card');\r\n\r\n  switch(parentElementSelector) {\r\n    case '.window-card':\r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.window-card--buttons-open-button',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            windowId: parentElement.dataset.windowId,\r\n            eventName: 'openButton'\r\n          });\r\n        }\r\n      );\r\n      \r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.window-card--buttons-close-button',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            windowId: parentElement.dataset.windowId,\r\n            eventName: 'closeButton'\r\n          });\r\n        }\r\n      );\r\n      \r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.settings-icon',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            windowId: parentElement.dataset.windowId,\r\n            eventName: 'goToSettingsButton'\r\n          });\r\n        }\r\n      );\r\n      break;\r\n\r\n    case '.central-window--network-card':\r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.open-all-windows-button',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            eventName: 'openAllWindowsButton'\r\n          });\r\n        }\r\n      );\r\n      \r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.close-all-windows-button',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            eventName: 'closeAllWindowsButton'\r\n          });\r\n        }\r\n      );\r\n      \r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.add-new-window-button',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            eventName: 'addNewWindowButton'\r\n          });\r\n        }\r\n      );\r\n      break;\r\n\r\n    case '.setting-card':\r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.setting-card--edit',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            eventName: 'settingCardEdit',\r\n            settingName: parentElement.dataset.settingName,\r\n            settingValue: parentElement\r\n              .querySelector('.setting-card--value').textContent,\r\n          });\r\n        }\r\n      );\r\n      break;\r\n\r\n    case '.dialog-1':\r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.dialog-1-card--button-cancle',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            eventName: 'dialogButtonCancle',\r\n            dialogCard: parentElement,\r\n            dialogNumber: 1,\r\n          });\r\n        }\r\n      );\r\n      \r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.dialog-1-card--button-submit',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            eventName: 'dialogButtonSubmit',\r\n            dialogCard: parentElement,\r\n            dialogNumber: 1,\r\n            setting: {\r\n              name: parentElement.querySelector('.dialog-1-card--name')\r\n                .textContent,\r\n              value: parentElement.querySelector('.dialog-1-card--input')\r\n                .value,\r\n            },\r\n          });\r\n        }\r\n      );\r\n      break;\r\n\r\n    case '.dialog-2':\r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.dialog-2-card--button-cancle',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            eventName: 'dialogButtonCancle',\r\n            dialogCard: parentElement,\r\n            dialogNumber: 2,\r\n          });\r\n        }\r\n      );\r\n      \r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.dialog-2-card--button-submit',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            eventName: 'dialogButtonSubmit',\r\n            dialogCard: parentElement,\r\n            dialogNumber: 2,\r\n            setting: {\r\n              name: parentElement.querySelector('.dialog-2-card--name')\r\n                .textContent,\r\n            },\r\n          });\r\n        }\r\n      );\r\n      break;\r\n      \r\n\r\n    case '.dialog-3':\r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.dialog-3-card--button-cancle',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            eventName: 'dialogButtonCancle',\r\n            dialogCard: parentElement,\r\n            dialogNumber: 3,\r\n          });\r\n        }\r\n      );\r\n      \r\n      addEventToNewElement(\r\n        parentElement,\r\n        '.dialog-3-card--button-submit',\r\n        'click',\r\n        () => {\r\n          uiEventsHandler({\r\n            sourceType: parentElementSelector,\r\n            eventName: 'dialogButtonSubmit',\r\n            dialogCard: parentElement,\r\n            dialogNumber: 3,\r\n            setting: {\r\n              name: parentElement.querySelector('.dialog-3-card--name')\r\n                .textContent,\r\n              value: parentElement.querySelector('select').value,\r\n            },\r\n          });\r\n        }\r\n      );\r\n      break;\r\n\r\n    default:\r\n      throw new Error(`\"${parentElementSelector}\" is unknown.`);\r\n      break;\r\n  }\r\n}\r\n\r\nfunction addClickSoundToUIElements (parentElement) {\r\n  addEventToNewElement(\r\n    parentElement,\r\n    '[class*=\"interactive-ui-element\"]',\r\n    'click',\r\n    () => {\r\n      click1Audio.volume = config.menuControl.CLICK_1_VOLUME;\r\n      click1Audio.play();\r\n    }\r\n  );\r\n}\r\n\r\nfunction addEventToNewElement (\r\n  parentElement,\r\n  selector,\r\n  eventType,\r\n  evenetCallback\r\n) {\r\n  addNewElementTempClass(parentElement);\r\n\r\n  getNewElement().querySelectorAll(selector)\r\n  .forEach((uiElement) => {\r\n    uiElement.addEventListener(eventType, evenetCallback )\r\n  });\r\n\r\n  removeNewElementTempClass(parentElement);\r\n}\r\n\r\nfunction removeSettingCardEditIcon(parentElement) {\r\n  addNewElementTempClass(parentElement);\r\n\r\n  getNewElement().querySelectorAll('.setting-card--edit')\r\n  .forEach((uiElement) => {\r\n    uiElement.remove();\r\n  });\r\n\r\n  removeNewElementTempClass(parentElement);\r\n}\r\n\r\nfunction addNewElementTempClass (element) {\r\n  element.classList.add('new-element-tmep-class');\r\n}\r\n\r\nfunction removeNewElementTempClass (element) {\r\n  document.querySelectorAll('.new-element-tmep-class')\r\n    .forEach(element => {\r\n      element.classList.remove('new-element-tmep-class');\r\n    })\r\n}\r\n\r\nfunction getNewElement () {\r\n  return document.querySelector('.new-element-tmep-class');\r\n}\r\n\r\nfunction windowGoOnline(windowId) {\r\n  getWindowDOMElement(windowId).classList.remove('offline-window');\r\n  if(isCentralWindow(windowId)) {\r\n    getCentralWindowParentDOMElement(windowId)\r\n      .classList.remove('offline-window');\r\n  }\r\n}\r\n\r\nfunction setWindowLockState(windowId, locked) {\r\n  let windowDOMElement = getWindowDOMElement(windowId);\r\n  if(locked) {\r\n    windowDOMElement.dataset.lockState = 'locked'\r\n  } else {\r\n    windowDOMElement.dataset.lockState = 'unlocked'\r\n  }\r\n}\r\n\r\nfunction setWindowBlockedState(windowId, blocked) {\r\n  let windowDOMElement = getWindowDOMElement(windowId);\r\n  if(isCentralWindow(windowId)) {\r\n      windowDOMElement = getCentralWindowParentDOMElement(windowId);\r\n  }\r\n  if(blocked) {\r\n    windowDOMElement.classList.add('window-blocked');\r\n  } else {\r\n    windowDOMElement.classList.remove('window-blocked');\r\n  }\r\n}\r\n\r\nfunction windowGoOffline(windowId) {\r\n  getWindowDOMElement(windowId).classList.add('offline-window');\r\n  if(isCentralWindow(windowId)) {\r\n    getCentralWindowParentDOMElement(windowId)\r\n      .classList.add('offline-window');\r\n  }\r\n}\r\n\r\nfunction getWindowDOMElement(windowId) {\r\n  return document.querySelector(`[data-window-id='${windowId}']`);\r\n}\r\n\r\nfunction isCentralWindow(windowId) {\r\n  if(getCentralWindowParentDOMElement(windowId)) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction getCentralWindowParentDOMElement(windowId) {\r\n  windowElement = getWindowDOMElement(windowId);\r\n  return (\r\n    getWindowDOMElement(windowId)\r\n      .closest('.central-window')\r\n  );\r\n}\r\n\r\nfunction goToPage(pageSelector) {\r\n  hideAllOtherPages(pageSelector);\r\n\r\n  switch(pageSelector) {\r\n    case '.home-page':\r\n      focusNavBarItem('.nav-bar--item-home');\r\n      showPage('.home-page');\r\n      break;\r\n      \r\n    case '.settings-page':\r\n      focusNavBarItem('.nav-bar--item-settings');\r\n      swtichSettingsPage('Setting');\r\n      showPage('.settings-page');\r\n      break;\r\n      \r\n    case '.status-page':\r\n      focusNavBarItem('.nav-bar--item-status');\r\n      swtichSettingsPage('Status');\r\n      showPage('.settings-page');\r\n      break;\r\n\r\n    default:\r\n      throw new Error(`There is no page named \"${pageSelector}\"`);\r\n  }\r\n\r\n  currentPage = pageSelector;\r\n}\r\n\r\nfunction showPage(pageSelector) {\r\n  let pageElement;\r\n\r\n  pageElement = document.querySelector(pageSelector);\r\n  if(pageElement) {\r\n    pageElement.classList.remove('hidden-page');\r\n  }\r\n\r\n  if(pageSelector !== '.home-page') {\r\n    pageElement = document.querySelector('.nav-bar');\r\n    if(pageElement) {\r\n      pageElement.classList.remove('hidden-page');\r\n    }\r\n  }\r\n}\r\n\r\nfunction hideAllOtherPages(pageSelector) {\r\n  let otherActivePages = document\r\n    .querySelectorAll(`:not(${pageSelector}):not(.hidden-page).app-page`);\r\n\r\n  if(otherActivePages !== null) {\r\n    otherActivePages\r\n      .forEach(activePage => {\r\n        activePage.classList.add('hidden-page');\r\n      });\r\n  }\r\n\r\n  if(pageSelector === '.home-page') {\r\n    let navBar = document.querySelector('.nav-bar');\r\n    if(navBar) {\r\n      navBar.classList.add('hidden-page');\r\n    }\r\n  }\r\n}\r\n\r\nfunction setWindowCardBatteryPercentage(windowId, batteryPercentage) {\r\n  getWindowDOMElement(windowId).style.setProperty(\r\n    '--battery-percentage',\r\n    batteryPercentage\r\n  );\r\n}\r\n\r\nfunction setWindowCardName(windowId, windowName) {\r\n  getWindowDOMElement(windowId)\r\n    .querySelector(`.window-card--room-name`).textContent = windowName;\r\n}\r\n\r\nfunction setWindowCardDoorClosePercentage(windowId, doorClosePercentage) {\r\n  const windowCardImage =  getWindowDOMElement(windowId)\r\n    .querySelector('.window-img--side');\r\n  let leftMostPosition = getComputedStyle(windowCardImage)\r\n    .getPropertyValue('--windw-side-pos-left-most');\r\n  let rightMostPosition = getComputedStyle(windowCardImage)\r\n    .getPropertyValue('--windw-side-pos-right-most');\r\n\r\n  leftMostPosition = parseInt(leftMostPosition);\r\n  rightMostPosition = parseInt(rightMostPosition);\r\n\r\n  doorClosePercentage = toolBox.constrainValue(doorClosePercentage, 0, 100);\r\n\r\n  doorClosePercentage = toolBox.mapValue(\r\n    doorClosePercentage,\r\n    0,\r\n    100,\r\n    leftMostPosition,\r\n    rightMostPosition\r\n  );\r\n\r\n  windowCardImage.style.setProperty(\r\n    '--windw-side-pos',\r\n    `${doorClosePercentage}%`\r\n  );\r\n}\r\n\r\nfunction navBarInit () {\r\n  document.querySelectorAll('.nav-bar--item')\r\n  .forEach((navBarItem) => {\r\n    navBarItem.addEventListener('click', () => {\r\n      click1Audio.volume = config.menuControl.CLICK_1_VOLUME;\r\n      click1Audio.play();\r\n      navBarEvent(navBarItem);\r\n    })\r\n  });\r\n}\r\n\r\nfunction navBarEvent (navBarItem) {\r\n  if(navBarItemHasClass(navBarItem, 'nav-bar--item-home')) {\r\n    uiEventsHandler({\r\n      sourceType: '.nav-bar--item',\r\n      eventName: 'Home',\r\n    });\r\n  } else if(navBarItemHasClass(navBarItem, 'nav-bar--item-status')) {\r\n    uiEventsHandler({\r\n      sourceType: '.nav-bar--item',\r\n      eventName: 'Status',\r\n    });\r\n\r\n  } else if(navBarItemHasClass(navBarItem, 'nav-bar--item-settings')) {\r\n    uiEventsHandler({\r\n      sourceType: '.nav-bar--item',\r\n      eventName: 'Settings',\r\n    });\r\n\r\n  } else if(navBarItemHasClass(navBarItem, 'nav-bar--item-remove')) {\r\n    uiEventsHandler({\r\n      sourceType: '.nav-bar--item',\r\n      eventName: 'Remove',\r\n    });\r\n\r\n  } else if(navBarItemHasClass(navBarItem, 'nav-bar--item-advance')) {\r\n    uiEventsHandler({\r\n      sourceType: '.nav-bar--item',\r\n      eventName: 'Advance',\r\n    });\r\n\r\n  }\r\n}\r\n\r\nfunction navBarItemHasClass (navBarItem, className) {\r\n  return [...navBarItem.classList].includes(className);\r\n}\r\n\r\nfunction focusNavBarItem (itemSelector) {\r\n  const currentSelectedItem = document.querySelector(\r\n    `.nav-bar--item-selected:not(${itemSelector})`\r\n  );\r\n  const newlySelectedItem = document.querySelector(`${itemSelector}`);\r\n\r\n  if(currentSelectedItem !== null) {\r\n    currentSelectedItem.classList.remove('nav-bar--item-selected');\r\n  }\r\n  \r\n  if(newlySelectedItem !== null) {\r\n    newlySelectedItem.classList.add('nav-bar--item-selected');\r\n  }\r\n}\r\n\r\nfunction emptyPage (pageSelector) {\r\n  switch(pageSelector) {\r\n    case '.home-page':\r\n      while(1) {\r\n        let settingCard = document.querySelector('.window-card');\r\n    \r\n        if(settingCard === null) {\r\n          break;\r\n        } else {\r\n          settingCard.remove();\r\n        }\r\n      }\r\n      break;\r\n      \r\n    case '.settings-page':\r\n      while(1) {\r\n        let settingCard = document.querySelector('.setting-card');\r\n    \r\n        if(settingCard === null) {\r\n          break;\r\n        } else {\r\n          settingCard.remove();\r\n        }\r\n      }\r\n      break;\r\n\r\n    default:\r\n      throw new Error(`There is no page named \"${pageSelector}\"`);\r\n  }\r\n\r\n  currentPage = pageSelector;\r\n}\r\n\r\nfunction windwCardExists(windowId) {\r\n  return (getWindowDOMElement(windowId) !== null);\r\n}\r\n\r\nfunction removeWindowCard(windowId) {\r\n  if(isCentralWindow(windowId)) {\r\n    getCentralWindowParentDOMElement(windowId).remove();\r\n  } else {\r\n    getWindowDOMElement(windowId).remove();\r\n  }\r\n}\r\n\r\nfunction getAllWindowIDs() {\r\n  let windowCardsList = document.querySelectorAll(\r\n    '.window-card:not(.central-window)'\r\n  );\r\n\r\n  windowCardsList = [...windowCardsList];\r\n  windowCardsList = windowCardsList.map((windowCard) => {\r\n    return windowCard.getAttribute('data-window-id');\r\n  });\r\n\r\n  return (new Set(windowCardsList));\r\n}\r\n\r\nfunction setNetworkOnlineWindows(onlineWindows, networkWindowsCount) {\r\n  const networkStatusElement = document\r\n    .querySelector('.network-status--value')\r\n  \r\n  if(networkStatusElement !== null) {\r\n    networkStatusElement.textContent = \r\n      `${onlineWindows} / ${networkWindowsCount}`;\r\n  }\r\n}\r\n\r\nfunction getCurrentPage() {\r\n  return currentPage;\r\n}\r\n\r\nfunction getSettingCardElement(settingName) {\r\n  let settingCard = document.querySelector(\r\n    `[data-setting-name=\"${settingName}\"]`\r\n  );\r\n\r\n  return settingCard;\r\n}\r\n\r\nfunction hasSettingCard(settingName) {\r\n  return (getSettingCardElement(settingName) !== null);\r\n}\r\n\r\nfunction updateSettingCard(settingName, settingValue) {\r\n  let settingCard = getSettingCardElement(settingName);\r\n  settingCard.querySelector(\".setting-card--value\")\r\n    .textContent = settingValue;\r\n}\r\n\r\nfunction getStatusCardElement(statusName) {\r\n  let statusCard = document.querySelector(\r\n    `[data-status-name=\"${statusName}\"]`\r\n  );\r\n\r\n  return statusCard;\r\n}\r\n\r\nfunction hasStatusCard(statusName) {\r\n  return (getStatusCardElement(statusName) !== null);\r\n}\r\n\r\nfunction updateStatusCard(statusName, statusValue) {\r\n  let statusCard = getStatusCardElement(statusName);\r\n  statusCard.querySelector(\".status-card--value\")\r\n    .textContent = statusValue;\r\n}\r\n\r\nfunction swtichSettingsPage(newPage) {\r\n  let root = document.querySelector(':root');\r\n  root.style.setProperty('--setting-card-display', 'none');\r\n  root.style.setProperty('--status-card-display', 'none');\r\n\r\n  switch(newPage) {\r\n    case 'Status':\r\n      root.style.setProperty('--status-card-display', 'grid');\r\n      break;\r\n\r\n    case 'Advance':\r\n\r\n      break;\r\n\r\n    case 'Setting':\r\n      root.style.setProperty('--setting-card-display', 'grid');\r\n      break;\r\n\r\n    default:\r\n      throw new Error(`There is no setting page named \"${newPage}\"`);\r\n      break;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  init,\r\n  addNewSettingCard,\r\n  hasSettingCard,\r\n  getSettingCardElement,\r\n  updateSettingCard,\r\n  addNewStatusCard,\r\n  hasStatusCard,\r\n  getStatusCardElement,\r\n  updateStatusCard,\r\n  addNewWindowCard,\r\n  removeWindowCard,\r\n  windowGoOnline,\r\n  windowGoOffline,\r\n  isCentralWindow,\r\n  getCentralWindowParentDOMElement,\r\n  goToPage,\r\n  setWindowCardBatteryPercentage,\r\n  setWindowCardDoorClosePercentage,\r\n  setWindowCardName,\r\n  closeDialog,\r\n  opendialog,\r\n  emptyPage,\r\n  windwCardExists,\r\n  getWindowDOMElement,\r\n  getAllWindowIDs,\r\n  setNetworkOnlineWindows,\r\n  getCurrentPage,\r\n  swtichSettingsPage,\r\n  focusNavBarItem,\r\n  setWindowLockState,\r\n  setWindowBlockedState,\r\n};\r\n\r\n\n\n//# sourceURL=webpack://smart-window-app/./src/menuControl.js?");

/***/ }),

/***/ "./src/toolBox.js":
/*!************************!*\
  !*** ./src/toolBox.js ***!
  \************************/
/***/ ((module) => {

eval("function randomRange(min, max) {\r\n\treturn Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction mapValue(inValue, inMin, inMax, outMin, outMax) {\r\n  return (inValue - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\r\n}\r\n\r\nfunction constrainValue(inValue, min, max) {\r\n  if(inValue < min) {\r\n    return min;\r\n  }\r\n  \r\n  if(inValue > max) {\r\n    return max;\r\n  }\r\n  \r\n  return inValue;\r\n}\r\n\r\nfunction toHexString(byteArray, separator='') {\r\n  return Array.from(byteArray, (byte) => {\r\n    return ('0' + (byte & 0xFF).toString(16)).slice(-2).toUpperCase();\r\n  }).join(separator)\r\n}\r\n\r\nfunction fromHexString(hexString, separator='') {\r\n  hexString = hexString.split(separator).join('');\r\n  \r\n  return ([...Uint8Array.from(\r\n    hexString.match(/.{1,2}/g).map((byte) => parseInt(byte, 16))\r\n  )]);\r\n}\r\n\r\nfunction deepClone(obj) {\r\n  return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nfunction array4ToFloat32(array4, littleEndian=true) {\r\n  if(!littleEndian) {\r\n    array4.reverse();\r\n  }\r\n\r\n  let uint8Array = new Uint8Array(array4);\r\n  let result = (new Float32Array(uint8Array.buffer))[0];\r\n\r\n  return result;\r\n}\r\n\r\nfunction float32ToArray4(float32, littleEndian=true) {\r\n  let float32Buffer = new Float32Array([float32]);\r\n  let resultArray = (new Uint8Array(float32Buffer.buffer));\r\n\r\n  if(!littleEndian) {\r\n    resultArray.reverse();\r\n  }\r\n\r\n  return [...resultArray];\r\n}\r\n\r\nfunction arrayToInt(arr, signed=false, littleEndian=true) {\r\n  size = arr.length;\r\n  let uint8Array = new Uint8Array(arr);\r\n  let result;\r\n\r\n  if(!littleEndian) {\r\n    uint8Array.reverse();\r\n  }\r\n  \r\n  if(signed) {\r\n    if(size <= 1) {\r\n      result = (new Int8Array(uint8Array.buffer))[0];\r\n    } else if(size <= 2) {\r\n      result = (new Int16Array(uint8Array.buffer))[0];\r\n    } else if(size <= 4) {\r\n      result = (new Int32Array(uint8Array.buffer))[0];\r\n    } else if(size <= 8) {\r\n      throw new Error(`\"intToArray: size = ${size}\", is not supported`);\r\n    }\r\n  } else {\r\n    if(size <= 1) {\r\n      result = (new Uint8Array(uint8Array.buffer))[0];\r\n    } else if(size <= 2) {\r\n      result = (new Uint16Array(uint8Array.buffer))[0];\r\n    } else if(size <= 4) {\r\n      result = (new Uint32Array(uint8Array.buffer))[0];\r\n    } else if(size <= 8) {\r\n      throw new Error(`\"intToArray: size = ${size}\", is not supported`);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction intToArray(num, size, signed=false, littleEndian=true) {\r\n  let refArray;\r\n  let result;\r\n  \r\n  if(signed) {\r\n    if(size <= 1) {\r\n      refArray = new Int8Array([num]);\r\n    } else if(size <= 2) {\r\n      refArray = new Int16Array([num]);\r\n    } else if(size <= 4) {\r\n      refArray = new Int32Array([num]);\r\n    } else if(size <= 8) {\r\n      throw new Error(`\"intToArray: size = ${size}\", is not supported`);\r\n    }\r\n  } else {\r\n    if(size <= 1) {\r\n      refArray = new Uint8Array([num]);\r\n    } else if(size <= 2) {\r\n      refArray = new Uint16Array([num]);\r\n    } else if(size <= 4) {\r\n      refArray = new Uint32Array([num]);\r\n    } else if(size <= 8) {\r\n      throw new Error(`\"intToArray: size = ${size}\", is not supported`);\r\n    }\r\n  }\r\n\r\n  result = new Uint8Array(refArray.buffer);\r\n\r\n  if(!littleEndian) {\r\n    result.reverse();\r\n  }\r\n\r\n  return [...result];\r\n}\r\n\r\nfunction byteArrayToNum(byteArray, type='uint32', littleEndian=true) {\r\n  type = type.toLowerCase();\r\n  let result = null;\r\n\r\n  switch(type) {\r\n    case 'uint64':\r\n      result = arrayToInt(byteArray, false, littleEndian);\r\n      break;\r\n\r\n    case 'int64':\r\n      result = arrayToInt(byteArray, true, littleEndian);\r\n      break;\r\n    \r\n    case 'uint32':\r\n      result = arrayToInt(byteArray, false, littleEndian);\r\n      break;\r\n\r\n    case 'int32':\r\n      result = arrayToInt(byteArray, true, littleEndian);\r\n      break;\r\n      \r\n    case 'uint16':\r\n      result = arrayToInt(byteArray, false, littleEndian);\r\n      break;\r\n\r\n    case 'int16':\r\n      result = arrayToInt(byteArray, true, littleEndian);\r\n      break;\r\n    \r\n    case 'uint8':\r\n      result = arrayToInt(byteArray, false, littleEndian);\r\n      break;\r\n\r\n    case 'int8':\r\n      result = arrayToInt(byteArray, true, littleEndian);\r\n      break;\r\n\r\n    case 'float32':\r\n    case 'float':\r\n      result = array4ToFloat32(byteArray, littleEndian);\r\n      break;\r\n\r\n    default: throw new Error(`type \"${type}\" is unknown.`);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction numToByteArray(num, type='uint32', littleEndian=true) {\r\n  type = type.toLowerCase();\r\n  let result = null;\r\n\r\n  switch(type) {\r\n    case 'uint64':\r\n      result = intToArray(num, 8, false, littleEndian);\r\n      break;\r\n\r\n    case 'int64':\r\n      result = intToArray(num, 8, true, littleEndian);\r\n      break;\r\n      \r\n    case 'uint32':\r\n      result = intToArray(num, 4, false, littleEndian);\r\n      break;\r\n\r\n    case 'int32':\r\n      result = intToArray(num, 4, true, littleEndian);\r\n      break;\r\n      \r\n    case 'uint16':\r\n      result = intToArray(num, 2, false, littleEndian);\r\n      break;\r\n\r\n    case 'int16':\r\n      result = intToArray(num, 2, true, littleEndian);\r\n      break;\r\n      \r\n    case 'uint8':\r\n      result = intToArray(num, 1, false, littleEndian);\r\n      break;\r\n\r\n    case 'int8':\r\n      result = intToArray(num, 1, true, littleEndian);\r\n      break;\r\n\r\n    case 'float32':\r\n    case 'float':\r\n      result = float32ToArray4(num, littleEndian);\r\n      break;\r\n\r\n    default: throw new Error(`type \"${type}\" is unknown.`);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction asciiArrayToString(array) {\r\n  array.splice(array.indexOf(0));\r\n  return String.fromCharCode(...array);\r\n}\r\n\r\nfunction stringToAsciiArray(str) {\r\n  return str\r\n    .split('')\r\n    .map(char => char.charCodeAt(0));\r\n}\r\n\r\nfunction round(num, decimals=null) {\r\n  if(decimals === null) {\r\n    return Math.round(num);\r\n  }\r\n\r\n  return parseFloat(num.toFixed(decimals));\r\n}\r\n\r\nfunction getTick() {\r\n  return (new Date().getTime());\r\n}\r\n\r\nfunction threadTimerFactoryFunc() {\r\n  let newThread = {\r\n    interval: 0,\r\n    \r\n    timePassed() {\r\n      return (this.interval <= getTick())\r\n    },\r\n    \r\n    setNextInterval(nextInterval) {\r\n      this.interval = getTick() + nextInterval;\r\n    },\r\n  }\r\n\r\n  return newThread;\r\n}\r\n\r\nmodule.exports = {\r\n  randomRange,\r\n  mapValue,\r\n  constrainValue,\r\n  toHexString,\r\n  fromHexString,\r\n  deepClone,\r\n  array4ToFloat32,\r\n  float32ToArray4,\r\n  arrayToInt,\r\n  intToArray,\r\n  byteArrayToNum,\r\n  numToByteArray,\r\n  asciiArrayToString,\r\n  stringToAsciiArray,\r\n  round,\r\n  getTick,\r\n  threadTimerFactoryFunc,\r\n};\r\n\r\n\n\n//# sourceURL=webpack://smart-window-app/./src/toolBox.js?");

/***/ }),

/***/ "./src/wifiCom.js":
/*!************************!*\
  !*** ./src/wifiCom.js ***!
  \************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const toolBox = __webpack_require__(/*! ./toolBox.js */ \"./src/toolBox.js\");\r\nconst config = __webpack_require__(/*! ./config.js */ \"./src/config.js\");\r\n\r\nfunction sendPacketToCenterNode(\r\n  packetCommand,\r\n  packetData=[],\r\n  responseCallbackHandler,\r\n  failedCallbackHandler,\r\n) {\r\n  let requestOptions = {\r\n    method: 'GET',\r\n    redirect: 'follow'\r\n  };\r\n\r\n  const TXPacket = [packetCommand, ...packetData];\r\n\r\n  let CRC = 0x00;\r\n  TXPacket.forEach(byte => {\r\n    CRC ^= byte;\r\n  });\r\n  TXPacket.push(CRC);\r\n\r\n  let TXPacketString = toolBox.toHexString(TXPacket);\r\n\r\n  switch(packetCommand) {\r\n    // case 0:\r\n    // case 1:\r\n    // case 2:\r\n    // case 3:\r\n    // case 4:\r\n    // case 5:\r\n    // case 6:\r\n    case 0xFF:\r\n      console.log(\"Packet Data:\", packetData);\r\n      console.log(\"Transmitting Packet:\", TXPacketString);\r\n      break;\r\n    \r\n    default:\r\n      break;\r\n  }\r\n\r\n  fetchWithTimeout(\r\n    `http://${config.wifi.SERVER_IP}:80/packet?plain=${TXPacketString}`,\r\n    config.app.MAX_PENDING_FOR_RESPONSE_TIME * 0.5,\r\n    {\r\n      ...requestOptions,\r\n      cache: \"no-store\",\r\n    }\r\n  )\r\n    .then(response => response.text())\r\n    .then(result => {\r\n      if(responseCallbackHandler) {\r\n        responseCallbackHandler(result)\r\n      }\r\n    })\r\n    .catch(error => {\r\n      if(failedCallbackHandler) {\r\n        failedCallbackHandler(error)\r\n      }\r\n    });\r\n}\r\n\r\nasync function fetchWithTimeout(resource, timeoutMs, options = {}) {\r\n  const { timeout = timeoutMs } = options;\r\n  \r\n  const controller = new AbortController();\r\n  const id = setTimeout(() => controller.abort(), timeout);\r\n  const response = await fetch(resource, {\r\n    ...options,\r\n    signal: controller.signal  \r\n  });\r\n  clearTimeout(id);\r\n  return response;\r\n}\r\n\r\nfunction requestDeviceStatus(windowIndex, requestResultHandler) {\r\n  let requestResultHandlerFunction = requestResultHandler;\r\n  setTimeout(() => {\r\n    requestResultHandlerFunction = (Result) => {\r\n      console.log('This request is expired');\r\n      console.log('Result: ', Result);\r\n    };\r\n  }, config.app.MAX_PENDING_FOR_RESPONSE_TIME * 0.8);\r\n\r\n  sendPacketToCenterNode(\r\n    wifiCommandValue('WiFi_Command_Request_Network_Feedback'),\r\n    [windowIndex],\r\n    (result) => {\r\n      result = toolBox.fromHexString(result);\r\n      let CRCPassed = packetCRCCheck(result);\r\n\r\n      let packetCommand = result[0];\r\n      // let packetCRC = result[result.length - 1];\r\n      let packetData = result.slice(1, result.length - 1);\r\n\r\n      let deviceResponse = {};\r\n\r\n      // let timeDiff = toolBox.getTick();\r\n      if(!CRCPassed) {\r\n        deviceResponse.status = 'failed';\r\n        deviceResponse.packet = 'RX CRC Errored';\r\n        deviceResponse.pending = true;\r\n      } else {\r\n        switch(config.wifi.WIFI_COMMAND[packetCommand]) {\r\n          case 'WiFi_Command_Request_Network_Feedback':\r\n            deviceResponse.status = 'succeeded';\r\n            deviceResponse.packet = {\r\n              type: 'device status',\r\n              deviceStatus: extractDeviceStatusPacket(packetData),\r\n            };\r\n            // console.log('packetData:', packetData);\r\n            deviceResponse.pending = true;\r\n            break;\r\n            \r\n          case 'WiFi_Command_Error':\r\n              switch(config.wifi.WIFI_PACKET_ERROR[packetData[0]]) {\r\n                case 'WiFi_Packet_Error_CRC':\r\n                  deviceResponse.status = 'failed';\r\n                  deviceResponse.packet = 'TX: WiFi_Packet_Error_CRC';\r\n                  break;\r\n                case 'WiFi_Packet_Error_Data_Length':\r\n                  deviceResponse.status = 'failed';\r\n                  deviceResponse.packet = 'TX: WiFi_Packet_Error_Data_Length';\r\n                  break;\r\n                case 'WiFi_Packet_Error_Data':\r\n                  deviceResponse.status = 'failed';\r\n                  deviceResponse.packet = 'TX: WiFi_Packet_Error_Data';\r\n                  break;\r\n                case 'WiFi_Packet_Error_Empty_Slot':\r\n                  deviceResponse.status = 'succeeded';\r\n                  deviceResponse.packet = {\r\n                    type: 'device status',\r\n                    deviceStatus: {\r\n                      status: {\r\n                        emptySlot: true,\r\n                      }\r\n                    },\r\n                  };\r\n                  break;\r\n                case 'WiFi_Packet_Error_Out_Of_Range_Slot':\r\n                  deviceResponse.status = 'failed';\r\n                  deviceResponse.packet = 'TX: WiFi_Packet_Error_Out_Of_Range_Slot';\r\n                  break;\r\n\r\n                case 'WiFi_Packet_Error_Command':\r\n                  deviceResponse.status = 'failed';\r\n                  deviceResponse.packet = 'TX: WiFi_Packet_Error_Command';\r\n                  break;\r\n\r\n                default:\r\n                  deviceResponse.status = 'failed';\r\n                  deviceResponse.packet = 'TX: WiFi_Packet_Error_Unknown';\r\n                  break;\r\n              }\r\n              \r\n              deviceResponse.pending = true;\r\n              break;\r\n\r\n          default:\r\n            console.log('packetCommand', packetCommand);\r\n            throw new Error(`Why did i end up here while checking, \"toolBox.wifi.WIFI_COMMAND[packetCommand]\" ?!?!`);\r\n            break;\r\n        }\r\n      }\r\n      // console.log('packet extraction time = ', timeDiff - toolBox.getTick())\r\n      \r\n      requestResultHandlerFunction(deviceResponse);\r\n\r\n      // console.log(deviceResponse);\r\n    },\r\n    (error) => {\r\n      let deviceResponse = {};\r\n\r\n      deviceResponse.pending = true;\r\n      deviceResponse.status = 'failed';\r\n      deviceResponse.errorDescription = 'N/A';\r\n      deviceResponse.packet = error;\r\n\r\n      requestResultHandlerFunction(deviceResponse);\r\n\r\n      // console.log('error', error);\r\n      // console.log(deviceResponse);\r\n    },\r\n  );\r\n}\r\n\r\nfunction packetCRCCheck(packet) {\r\n  let calcedChecksum = calcChechsum(packet.slice(0, packet.length - 1));\r\n  let packetChecksum = packet[packet.length - 1];\r\n\r\n  return calcedChecksum === packetChecksum;\r\n}\r\n\r\nfunction calcChechsum(arr) {\r\n  return arr.reduce((CRC, currentVal) => {\r\n    return CRC ^ currentVal;\r\n  }, 0x00);\r\n}\r\n\r\nfunction extractDeviceStatusPacket(data) {\r\n  let dataCopy = [...data];\r\n  let deviceStatus = {};\r\n\r\n  const extractDataBytes = (size) => {\r\n    return dataCopy.splice(0, size);\r\n  }\r\n\r\n  const extractValueFromData = (size, format) => {\r\n    if(format === 'array') {\r\n      return extractDataBytes(size);\r\n    } else {\r\n      return toolBox.byteArrayToNum(\r\n        extractDataBytes(size),\r\n        format\r\n      );\r\n    }\r\n  }\r\n\r\n  const extractSensorInputConfigs = () => {\r\n    let result = [];\r\n    for(let i = 0; i < 6; i++) {\r\n      result.push({\r\n        Normal_Value: config.app.BSP_GPIO_PIN_STATE[\r\n          extractValueFromData(4, 'uint8')\r\n        ],\r\n        Open_Close_Time_Gap: extractValueFromData(4, 'uint32'),\r\n        Trigger_Event: config.app.SENSOR_INPUT_EVENT[\r\n          extractValueFromData(4, 'uint8')\r\n        ],\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const windowIndex = extractValueFromData(1, 'uint8');\r\n\r\n  deviceStatus.settings = {\r\n    Relay_Latch_Time: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Jack_And_Window_Movement_Time_Gap: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Speed_Monitoring_Process_Time_Interval: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Motor_1_Speed_1_Min_Expected_Speed: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Motor_1_Speed_2_Min_Expected_Speed: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Motor_1_Speed_Rise_Time: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Window_Lock_Time: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Window_Unlock_Time: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Window_Length: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Window_Closed_Proximity_Percentage: {\r\n      value: extractValueFromData(1, 'uint8'),\r\n      editable: true,\r\n    },\r\n    Driver_1_Strength_Percentage: {\r\n      value: extractValueFromData(1, 'uint8'),\r\n      editable: true,\r\n    },\r\n    Driver_2_Strength_Percentage: {\r\n      value: extractValueFromData(1, 'uint8'),\r\n      editable: true,\r\n    },\r\n    Motor_1_Reversed: {\r\n      value: extractValueFromData(1, 'uint8') === 0 ? 'No' : 'Yes',\r\n      editable: true,\r\n    },\r\n    Motor_2_Reversed: {\r\n      value: extractValueFromData(1, 'uint8') === 0 ? 'No' : 'Yes',\r\n      editable: true,\r\n    },\r\n    Window_Speed_Level_1: {\r\n      value: extractValueFromData(1, 'uint8'),\r\n      editable: true,\r\n    },\r\n    Window_Speed_Level_2: {\r\n      value: extractValueFromData(1, 'uint8'),\r\n      editable: true,\r\n    },\r\n    Window_Slow_Speed_Area_Percentage: {\r\n      value: extractValueFromData(1, 'uint8'),\r\n      editable: true,\r\n    },\r\n    Remote_Debounce_Time: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Motor_Driver_1_PWM_Frequency: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Motor_Driver_2_PWM_Frequency: {\r\n      value: extractValueFromData(4, 'uint32'),\r\n      editable: true,\r\n    },\r\n    Motor_Driver_1_PWM_Inverted: {\r\n      value: extractValueFromData(4, 'uint32') === 0 ? 'No' : 'Yes',\r\n      editable: true,\r\n    },\r\n    Motor_Driver_2_PWM_Inverted: {\r\n      value: extractValueFromData(4, 'uint32') === 0 ? 'No' : 'Yes',\r\n      editable: true,\r\n    },\r\n    Sensor_Input_Configs: {\r\n      value: extractSensorInputConfigs(),\r\n      editable: true,\r\n    },\r\n    Network_Mode: {\r\n      value: extractValueFromData(1, 'uint8') === 0 ? 'Network_Mode_Master' : 'Network_Mode_Slave',\r\n      editable: true,\r\n    },\r\n    Wifi_Mode_Server_SSID: {\r\n      value: toolBox.asciiArrayToString(extractValueFromData(25, 'array')),\r\n      editable: true,\r\n    },\r\n    Wifi_Mode_Server_PASS: {\r\n      value: toolBox.asciiArrayToString(extractValueFromData(25, 'array')),\r\n      editable: true,\r\n    },\r\n    Wifi_Mode_Client_SSID: {\r\n      value: toolBox.asciiArrayToString(extractValueFromData(25, 'array')),\r\n      editable: true,\r\n    },\r\n    Wifi_Mode_Client_PASS: {\r\n      value: toolBox.asciiArrayToString(extractValueFromData(25, 'array')),\r\n      editable: true,\r\n    },\r\n    Node_Mac_Address: {\r\n      value: toolBox.toHexString(extractValueFromData(6, 'array')),\r\n      editable: false,\r\n    },\r\n    Device_Name: {\r\n      value: toolBox.asciiArrayToString(extractValueFromData(25, 'array')),\r\n      editable: true,\r\n    },\r\n  }\r\n\r\n  deviceStatus.status = {\r\n    Window_Index: windowIndex,\r\n    Encoder_Value: extractValueFromData(4, 'int32'),\r\n    Blockage_Detected: extractValueFromData(1, 'uint8') ? 'Yes' : 'No',\r\n    Window_Locked: extractValueFromData(1, 'uint8') ? 'Yes' : 'No',\r\n    Window_State: config.app.WINDOW_STATE[\r\n      extractValueFromData(1, 'uint8')\r\n    ],\r\n    Window_Control_State: config.app.WINDOW_CONTROL_STATE[\r\n      extractValueFromData(1, 'uint8')\r\n    ],\r\n    Lock_Control_State: config.app.LOCK_CONTROL_STATE[\r\n      extractValueFromData(1, 'uint8')\r\n    ],\r\n    Window_Position_Unknown: extractValueFromData(1, 'uint8') ? 'Yes' : 'No',\r\n    Sensor_Input_State: extractValueFromData(6, 'array')\r\n      .map((num) => config.app.BSP_GPIO_PIN_STATE[num]),\r\n    Vin_Filtered: toolBox.round(extractValueFromData(4, 'float'), 4),\r\n    VBAT_Filtered: toolBox.round(extractValueFromData(4, 'float'), 4),\r\n    Responding: extractValueFromData(1, 'uint8') === 1 ? true : false,\r\n    Battery_Percentage: extractValueFromData(1, 'uint8'),\r\n  }\r\n\r\n  deviceStatus.settings.Device_ID = {\r\n    value: \"\" + deviceStatus.settings.Node_Mac_Address.value,\r\n    editable: false,\r\n  }\r\n\r\n  return deviceStatus;\r\n}\r\n\r\nfunction wifiCommandValue(wifiCommandStr) {\r\n  return config.wifi.WIFI_COMMAND.findIndex((value) => {\r\n    return value === wifiCommandStr;\r\n  });\r\n}\r\n\r\nfunction setSettingIndex(settingStr) {\r\n  settingStr = 'Setting_Set_' + settingStr;\r\n  return config.wifi.SET_SETTING.findIndex((value) => {\r\n    return value === settingStr;\r\n  });\r\n}\r\n\r\nfunction sendCommandPacket(commandName, options) {\r\n  commandName = commandName.toLowerCase();\r\n\r\n  switch(commandName) {\r\n    case 'open':\r\n      sendPacketToCenterNode(\r\n        wifiCommandValue('WiFi_Command_Window_Open'),\r\n        [...toolBox.fromHexString(options.windowId)]\r\n      );\r\n      break;\r\n\r\n    case 'close':\r\n      sendPacketToCenterNode(\r\n        wifiCommandValue('WiFi_Command_Window_Close'),\r\n        [...toolBox.fromHexString(options.windowId)]\r\n      );\r\n      break;\r\n\r\n    case 'openall':\r\n      sendPacketToCenterNode(\r\n        wifiCommandValue('WiFi_Command_All_Windows_Open')\r\n      );\r\n      break;\r\n\r\n    case 'closeall':\r\n      sendPacketToCenterNode(\r\n        wifiCommandValue('WiFi_Command_All_Windows_Close')\r\n      );\r\n      break;\r\n\r\n    case 'setsetting':\r\n      console.log('setsetting options', options);\r\n      sendPacketToCenterNode(\r\n        wifiCommandValue('WiFi_Command_Set_Setting'),\r\n        [\r\n          ...toolBox.fromHexString(options.windowId),\r\n          setSettingIndex(options.setting.name.split(' ').join('_')),\r\n          ...options.setting.value,\r\n        ]\r\n      );\r\n      break;\r\n\r\n    case 'removewindow':\r\n      sendPacketToCenterNode(\r\n        wifiCommandValue('WiFi_Command_Remove_Window'),\r\n        [...toolBox.fromHexString(options.windowId)]\r\n      );\r\n      break;\r\n\r\n    case 'addwindow':\r\n      sendPacketToCenterNode(\r\n        wifiCommandValue('WiFi_Command_Add_Window'),\r\n        [...options.setting.value]\r\n      );\r\n      break;\r\n\r\n    default:\r\n      console.log(`sendCommandPacket: Unkown Command ${commandName}`);\r\n      break;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  sendPacketToCenterNode,\r\n  requestDeviceStatus,\r\n  extractDeviceStatusPacket,\r\n  sendCommandPacket,\r\n  wifiCommandValue,\r\n  setSettingIndex,\r\n}\r\n\r\n\n\n//# sourceURL=webpack://smart-window-app/./src/wifiCom.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;